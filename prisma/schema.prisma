// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Car {
  id     String @id @unique @default(uuid())
  model  String
  year   Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  id                   String   @id @unique @default(uuid())
  email                String   @unique
  password             String
  name                 String
  age                  Int?
  from                 String?
  live                 String?
  tel                  String?
  car                  Car[]
  Post                 Post[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  role                 Role     @default(USER)
  // RefreshToken         RefreshToken[]
  profile_picture_path String   @default("")
  isOnline             Boolean  @default(false)
  groupChannel         String   @default("Unknow")
  userChannel          String   @default("Unknow")
  friends              String[]
  online               Boolean  @default(false)
}

// model User {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   email     String   @unique
//   name      String?
//   password  String
//   age       Int?
//   from      String?
//   live      String?
//   tel       String?
//   role      Role     @default(USER)
//   posts     Post[]
//   Car       Car[]
// }

model Post {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String   @db.VarChar(255)
  like      String[] @default([])

  shares               String[]   @default([])
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  image_path           String
  username             String
  profile_picture_path String     @default("")
  userId               String
  comments             comments[]
}

enum Role {
  USER
  ADMIN
}

model comments {
  id        String   @id @unique() @default(uuid())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  userId    String
}

model chat {
  id        String   @id @unique() @default(uuid())
  members   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model message {
  id        String   @id @unique() @default(uuid())
  chatId    String
  senderId  String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model chat {
//   id         String   @id @unique() @default(uuid())
//   text       String   @default("")
//   image_path String?
//   video_path String?
//   senderId   String
//   recieverId String
//   user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// model RefreshToken {
//   id          String   @id @unique @default(uuid())
//   hashedToken String
//   userId      String
//   User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   revoked     Boolean  @default(false)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }
